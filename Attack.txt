John Goodman (0101)
Harry Young (0201)

This project was interesting, but the 2nd part we spent more time making other peoples projects try to work or figuring out what we were allowed to attack (as most of our projects to attack are half finished), because the authors listed what they would protect, but never actually protected.  This might be a lot better in the future if you pick 5 projects that at least compile for everyone to attack. 


Project #1 - james014

This project did all the basic functionality, but we had to mess with it for a bit to figure out how to get it to run as the files uploaded had an init file already created and make clean was not removing it.  The authors also only protected against 3 attacks and had no encryption implemented (tho they mentioned it all in the Read-Me). 

First, we checked to make sure that atm locking out users (Listed as Defense #2) locked out the correct users and didn’t reset a users attempts after another successfully logged in.  For example, we created two users (Amy and Steve) and erroneously tried to log in Steve to lock his account. We then logged in Amy, and then tried to log in steve and he was still locked out. So the prevention of dictionary attacks on the pin works properly. 

One possible attack we found for this program was the use of rand()/srand() to generate keys and using system time to seed the PRNG. One method of attack would be to create a script that resets the system time to 0 seconds (Sometime in 1980)  and then run the init program. This way, we know that the seed that seeded the PRNG will probably be in the range of 0-2, depending on how long the program takes to execute 

Another vulnerability we found is the use of strcat. The authors should have used strncat as strcat does not check for overflow.  For instance, a possible attack is in atm.c they use a series of commands to build the command they will send to the bank (send command). One of the lines uses strcat to concat arg and pin to the end of the send command string.  You can potentially overflow this buffer with bad stuff such as injecting your own code and/or stealing information stored in other places. 

We did not bother with encryption attacks since none were implemented and you could steal anything you wanted that crossed the router since nothing is encrypted.

**** Write something here about how he couldn’t get encryption to work because he was trying to store 2048 bytes in 2048 bits **** (Probably not Needed)


Project #2 - jaskew

This project was fairly well put together, and encrypted most of the important aspects we tried to attack, such as authenticating the communication between the bank/atm, encrypting the pin, and other such items. They did not however, have a way to authenticate that a card was real. So in practice, if the attacker has the users name and pin, but no card, the attacker could create a .card file with the users name and use it to authenticate themselves with the pin.  Our project creates a random account number that is created with a secret key, so even if card files are created by the attacker, they will not auth to the bank.  This project however, the attacker could create a script to dictionary attack by creating .cards and rolling through the alphabet till the PIN works (If they only had a pin and knew it worked for 1 account (maybe multiple accounts!!! which is even worse!).


Project #3 - jbauti12

This program didnt work at all. We could get it to compile, but the basic commands didnt work. So we are going to use the project Design Document and “assume” that the project is fully functional.
The project claims to be resilliant against Man in the middle Packet Modifcation because “Protected any change to any message send or received, by having specific commands for certain messages.”. But the design document has no mention of using MAC's or digital signatures to authenticate the data. So any attacker who knows the encryption scheme could pretend to be either the ATM or Bank. The protocol is not protected against replay attacks either. When a user logs in, the attacker can just store the authentication packets sent from the ATM to the bank. Then later on, use those packets to log into a user's account without ever knowing the pin.

