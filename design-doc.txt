-----DESIGN DOCUMENT-----
John Goodman-Section 101
Harry Young-Section 201

Part 1: Protocol Design
Part 2: Attacks and Defenses





(Part 1)---------PROTOCOL DESIGN----------

bin/init: 
When run, init will generate a 2048-RSA pub/priv key pair for both the Bank and ATM 
such that:
    <filename>.bank has:
        bank public RSA key
        bank private RSA key
        atm public RSA key
    
    <filename>.atm has:
        atm public RSA key
        atm private RSA key    
        bank public RSA key

Per the spec, bin/bank and bin/atm will both read their respective files and load the 
keys into the appropriate places in memory.

To help explain how the protocol works, consider the following run example:

run bin/router
run bin/bank (this will automatically delete left over .card files)
run bin/atm

$ BANK: create-user bob 1234 100

This command does in order these things:
(1) Input Error Checking
(2) calloc space for USER data structure (see utils/user.h)
(3) Generate random 16 digit account number
(4) populate USER structure account number and relevant information
(5) store information in hash table with key = username and value = user data structure
(6) create card file <user>.card and store the account number in the created file

$ ATM: begin-session bob
This command does in order these things:
(1) generate a 128-bit randomized session key using /dev/urandom
(2) calloc memory for SESSION data structure (see utils/session.h)
(3) populate SESSION data structure with key, timestamp, and name
(4) check for <name>.card file
(5) send entire "begin-session bob" string to bank unencrypted
(6) bank recieves command, checks for username in hashtable
(7) if user exists, bank sends an unencrypted message asking for the PIN
    if user does not exist, bank sends a fail message
(8) ATM recieves bank message, if message is not "PIN? " then fail and free session
(9) ATM Hashes the session key with SHA256 hashing and then Digitally signs the key
    with the ATM's private RSA key
(10) ATM sends digital signiature to the bank
(11) ATM encrypts the session key with banks Public Key and sends to the Bank
(12) Bank unsigns Digital Signature with ATM public key
(13) Bank decrypts session key
(14) Bank checks if SHA256(session_key) == Digital Signature Hash
     if not, send an error
(15) At this point, both the ATM and BANK have the secret session key
(16) The Protocol uses AES-128 CBC Encryption with these properties
     -Every message will have a Randomly Generated IV
     -a HMAC with SHA1 is generated for each message
     -Append HMAC onto plaintext
     -Encrypt(msg|HMAC)
     -Append IV onto end of ciphertext -> (ciphertext|IV)
(17) The bank encrypts the recieved username with AES128 and sends to the ATM
(18) The ATM decrypts the recieved username and checks if it is the same as the
     username that was sent, if it is, continue, else, output an error
(19) ATM then asks user for PIN with prompt "PIN? "
(20) ATM sends encrypted PIN to the bank
(21) ATM reads users card file and sends Account Number to the bank encrypted
(22) Bank Decrypts PIN and Account No. If PIN and Account No dont match up with
     The data in the hashtable, then send an error
(23) If all checks pass, user is now Authorized to use the ATM. Prompt switches to
     ATM (<user>)
(24) Bank allocates current SESSION on the bank side and populates with session key
     etc
     
From here any valid messages entered onto the ATM Terminal are encrypted and sent
to the bank for decryption and processing. 


(Part 2)----------ATTACKS AND DEFENSES-----------

(1)Attack: 
    Running a dictionary attack on the PIN if attacker has .card file
Defense: 
    If PIN is entered incorrectly 3 times, lock the account

(2)Attack: 
    Running a Length Extension attack on the MAC in order to send messages
    that have a valid Hash without knowing the secret
Defense: 
    Traditional MAC with SHA1 is vulnerable to length-extension. HMAC is not,
    so we use HMAC to authenticate encrypted AES messages
                  
(3)Attack: 
    Evesdropping on data sent back and forth from the bank and ATM
Defense: 
    AES-128 Encryption prevents MITM from being able to view plaintext

(4)Attack: 
    MITM trying to spoof packets from the ATM
Defense: 
     Every message has an HMAC associated with it. The Bank and ATM both check to
     be sure that the HMAC(Plaintext) = recieved HMAC in order to guarantee
     Authenticity and Integrity. Non-repudiation is not guarenteed, 
     but only the ATM and Bank have the session key so this is a non-issue
         
(5)Attack: 
    Consider a protocol that does not use session keys but instead just uses 
    a shared secret key that is generated in the init file. If the same key is
    being used over and over again to encrypt for a particular user, an attacker 
    could just wait fora user to enter his/her PIN and save the resulting 
    encrypted message. Then send that encrypted message to the bank when the
    attacker wants to log in. In this case, the attacker is essentailly using 
    the encrypted message as the "PIN".
   Defense:
    Session Keys. Every time a user starts a session a new session key is created
    therefore the ciphertext will always be changing and the MITM cannot simply
    save the ciphertexts
         
(6) Attack: 
    Attacker knowing the PIN logging in without having the correct .card file

   Defense: 
    Card file has randomly generated account number. Even if the attacker forges a
    <user>.card file. There is really no way for the attacker to know the account
    number for a particular user without having the real .card file.
    
(7)Attack:
    When begin-session <user> is sent unencrypted, attacker can see and play around
    with the contents of this message

   Defense: 
    During User authentication, the bank sends back the contents of the
    message that it recieved
    
    
(9)Attack:
        Buffer Overflow on ATM Command line in order to access withdraw functionality
        without going through begin-session setup   
   Defense:
        All input to the program automatically throws a null terminator to the end
        before we start processing. We also use "n" functions to manually make sure
        any input doesnt go over the specified buffer sizes. If a string were to be
        too long, the n functions would truncate them, and then we would put a null
        terminator where the string was truncated. Regardless of these protections,
        if an attacker were to be given the ability to jump to the withdraw
        functionality, they wouldnt be able able to actually take money out of a users
        account because the bank would get confused and the program would likely hang.
        Perhaps, though, the attacker could inject their own printf statement to say
        "$10000 dispensed", but the buffer protections in place should prevent this
        
(10)Attack:
        Attacker intercepts a the ATM's session key and sends his own session key
        to the Bank
    Defense:
        We use a Digital Signature to sign the Session key when it is sent to the bank.
        Since the attacker does not have access to the ATM's private RSA key, 
        the attacker will not be able to sign the session key as the ATM. The bank
        will check the recieved session key against the Digital Signature and throwout
        anything that doesnt match.
   
         
         
      



     

    

